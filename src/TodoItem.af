.needs <std> // include the standard library header file that has some functions that are needed for most aflat programs to run

import string, String from "String"; // import the string library from the standard String module
import { print, printString } from "String" under st; // import the print function from the standard String module and put it under the st namespace
import { int_toString, str_toInt } from "strings" under strings;
import DateTime from "DateTime";
import { mmddyyyyToDate, Now } from "DateTime" under dt;
import { printInt, print } from "io" under io;
import File from "files";
import List, LinkedList from "Collections";
import {readString, fPrint} from "io" under io;

class TodoItem { // define a class called TodoItem
    const string title = new string(title); // create a constant string called title and set it to the value of the title parameter that is passed to the constructor
    DateTime dueDate = dt.mmddyyyyToDate(dueDate); // create a DateTime object called dueDate and set it to the value of the dueDate parameter that is passed to the constructor
    private bool done = false; // create a private bool called done and set it to false

    TodoItem init(adr title, adr dueDate) { // define the constructor for the TodoItem class the init function is called when a new instance of the class is created
        return my; // return the instance of the class that is being created 'my is always a reference to the instance of the class'
    };

    int print() { // define a function called print that returns an int
        let now = dt.Now(5); // create a DateTime object called now and set it to the current date and time
        let time = my.dueDate.getSeconds() - now.getSeconds(); // create an int called daysLeft and set it to the difference between the due date and the current date and time
        const string complete = if my.done "✓" else  if time < -86400 "⚠" else "✗"; // create a constant string called complete and set it to a check mark if the item is done, a warning sign if the item is overdue, or an X if the item is not done and not overdue
        io.fPrint("%s  Title: %s\t\t\tDue Date: %d/%d/%d", {complete, my.title, my.dueDate.getMonth(), my.dueDate.getDay(), my.dueDate.getYear()}); // print the complete string and the title string to the console
        return 0;
    };

    int complete() {
        my.done = true; // set the done property to true
        return 0;
    };

    bool isCompleted() { // define a function called isCompleted that returns a bool
        return my.done; // return the value of the done property
    };

    int write(File f) {
        char[256] dateBuffer;
        let sec = my.dueDate.getSeconds();
        strings.int_toString(sec, dateBuffer);
        f.write(dateBuffer);
        f.write(";");
        f.write(my.title.cstr());
        f.write(";");
        if my.done f.write("1")
        else f.write("0");
        f.write("\n");
    };

    int del() { // the del function is automatically called when the instance of the class is deleted.  It can also be called manually
        let title = my.title; // create a string called value that is a reference to the value property of the instance of the class
        delete title; // delete the title string that was created in the constructor. This will free up the memory that was allocated for the string
        let dueDate = my.dueDate; // create a DateTime object called dueDate that is a reference to the dueDate property of the instance of the class
        delete dueDate; // delete the dueDate DateTime object that was created in the constructor. This will free up the memory that was allocated for the DateTime object
    };
};

export List listFromStrings(List items) {
    List l = new List(TodoItem, items.getCount(), TodoItem.del); // create a List object called l and set it to a new List object that will hold TodoItem objects

    for int i = 0; i < items.getCount() - 1; i++ {
        let serialized = String(items.get(i)); // create a String object called serialized and set it to the value of the i'th item in the items list
        let parts = serialized.split(';'); // create a LinkedList object called parts and set it to the result of splitting the serialized string on the ; character
        String seconds = parts.get(0); // create a String object called getSeconds and set it to the value of the 0'th item in the parts list
        String title = parts.get(1); // create a String object called title and set it to the value of the 1'st item in the parts list
        String done = parts.get(2); // create a String object called done and set it to the value of the 2'nd item in the parts list
        // create a TodoItem object called item and set it to a new TodoItem object that has the title and dueDate properties set to the values of the title and dueDate strings
        TodoItem item = new TodoItem(title.getPrimitive(), "00-00-0000");
        item.dueDate = new DateTime(seconds.toInt()); // set the dueDate property of the item to the value of the seconds string converted to an int
        if done.toInt() == 1 item.complete(); // if the done string is equal to 1 then call the complete function on the item
        l.pushBack(item); // add the item to the l list
        io.print("\n");
    };
    return l; // return the l list
};